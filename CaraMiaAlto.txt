int alto[] = {
0, NOTE_D5, 0, NOTE_D5, 0, NOTE_D5, 0, NOTE_D5, // measure 1
0, 0, NOTE_DS5, 0, NOTE_DS5, 0, NOTE_DS5, 0, // measure 2
NOTE_DS5, 0, NOTE_D5, 0, NOTE_D5, 0, NOTE_D5, 0, // measure 3
NOTE_D5, 0, NOTE_DS5, 0, NOTE_DS5, 0, NOTE_DS5, 0, // measure 4
NOTE_DS5, 0, NOTE_D5, 0, NOTE_D5, 0, 0, 0, // measure 5
NOTE_D5, 0, NOTE_D5, 0, NOTE_D5, // only 5 counts, incomplete?
0, // 3 counts
// this last rest was reduced from 4 counts to add to measure 6
0, 0, 0, 0, 0, 0, 0, 0, // x1 8-count rest made into x8 1-count rests
// ==== Sweetly
NOTE_F5, NOTE_F5, NOTE_F5, NOTE_F5, NOTE_D5, NOTE_D5, NOTE_D5, NOTE_D5, // measure 8
NOTE_DS5, NOTE_DS5, NOTE_DS5, NOTE_DS5, NOTE_C4, NOTE_C4, NOTE_C4, NOTE_C4, // measure 9
NOTE_D5, NOTE_D5, NOTE_D5, NOTE_D5, NOTE_C4, NOTE_C4, NOTE_C4, NOTE_C4, // measure 10
NOTE_AS4, NOTE_DS5, // - 1/8
NOTE_G5,
NOTE_DS5, NOTE_AS4, // - 1/8
NOTE_G5, NOTE_F5, 0, 0, 0, // measure 11
0, // - 4 counts
0, // - 2 counts
NOTE_G5, NOTE_F5, // - 1/8
NOTE_F5, // measure 12
NOTE_DS5, NOTE_F5, // - 1/8
NOTE_DS5, NOTE_D5, NOTE_DS5, NOTE_AS5,
NOTE_A5, NOTE_G5, NOTE_F5, NOTE_DS5, NOTE_F5, NOTE_G5, // x6 @ 1/8 - measure 13
NOTE_G5, NOTE_F5, 0,
NOTE_G5, NOTE_A5, // - 1/8
NOTE_A5, NOTE_G5, NOTE_F5, NOTE_G5, // measure 14
NOTE_F5, NOTE_DS5, NOTE_DS5, NOTE_F5, NOTE_F5, 0, 0, 0, // measure 15
NOTE_D5, NOTE_C4, NOTE_D5, NOTE_DS5, // x4 @ 1/8
NOTE_F5, NOTE_C6, NOTE_D6, NOTE_C6, NOTE_AS5, NOTE_F5, // measure 16
NOTE_F5, NOTE_G5, NOTE_G5, NOTE_AS5,
NOTE_G5, NOTE_F5, // 2 counts - measure 17
NOTE_F5, NOTE_DS5, // 2 counts
NOTE_D5, // 4 counts - measure 18
};

int altoDur[] = {
100, 100, 100, 100, 100, 100, 100, 100,
100, 100, 100, 100, 100, 100, 100, 100, 
100, 100, 100, 100, 100, 100, 100, 100, 
100, 100, 100, 100, 100, 100, 100, 100, 
100, 100, 100, 100, 100, 100, 100, 100, 
100, 100, 100, 100, 100,
400,
100, 100, 100, 100, 100, 100, 100, 100,
// ==== Sweetly
100, 100, 100, 100, 100, 100, 100, 100,
100, 100, 100, 100, 100, 100, 100, 100,
100, 100, 100, 100, 100, 100, 100, 100,
50, 50, 100, 50, 50, 100, 100, 100, 100, 100, 
400, 200, 100, 100, 
100, 100, 100, 100, 100, 100, 100, 50, 50,
50, 50, 50, 50, 100, 100, 100, 50, 50, 100, 100,
100, 100, 100, 100, 100, 100, 100, 100, 
100, 100, 50, 50, 50, 50, 100, 100, 100, 100,
100, 100, 100, 100, 100, 100, 200,
200, 200, 200,
400
};
